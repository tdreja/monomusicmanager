using System;
using System.IO;
using System.Text.RegularExpressions;

namespace MonoMusicManager
{
    /// <summary>
    /// This class holds all relevant data from a music file (except the file contents itself).
    /// It also has methods for copying. Sorting files is done by the MusicFolder class.
    /// </summary>
    public class MusicFile
    {
        /// <summary>
        /// This regex will match with all characters that are invalid for file names.
        /// It is used to clean up any audio files that have invalid characters in their title
        /// </summary>
        public static Regex pathRegex = new Regex(string.Format("[{0}]", Regex.Escape(new string(Path.GetInvalidFileNameChars()))));

        /// <summary>
        /// To ensure that the collection remains usable on a systems, this regex will match invalid characters in linux systems
        /// </summary>
        public static Regex linuxRegex = new Regex(string.Format("[{0}]", Regex.Escape("\\/:*?\"<>|")));

        /// <summary>
        /// ID3Tag: Artist
        /// </summary>
        public string Artist { get; protected set; }

        /// <summary>
        /// ID3Tag: Title
        /// </summary>
        public string Title { get; protected set; }

        /// <summary>
        /// ID3Tag: Album
        /// </summary>
        public string Album { get; protected set; }

        /// <summary>
        /// ID3Tag: Genre
        /// </summary>
        public string Genre { get; protected set; }

        /// <summary>
        /// File path to the source file loaded into the program
        /// </summary>
        public string Source { get; protected set; }

        /// <summary>
        /// Bitrate of the music file
        /// </summary>
        public int BiteRate { get; protected set; }

        /// <summary>
        /// Duration of the music file
        /// </summary>
        public TimeSpan Duration { get; protected set; }

        /// <summary>
        /// ID3Tag: Track Number
        /// </summary>
        public uint TrackNr { get; protected set; }

        /// <summary>
        /// ID3Tag: Disc Number
        /// </summary>
        public uint DiscNr { get; protected set; }

        /// <summary>
        /// Folder the file will be sorted into
        /// </summary>
        public MusicFolder.Folders Folder { get; internal set; }

        /// <summary>
        /// Parent Folder of the album (if one exists, otherwise null);
        /// Example: ../Albums/*Parent*/AlbumTitle;
        /// This is generated by the internal algorithm that checks with the music collection;
        /// Note: This is useful whenever you injest a collection of one artist or an album series, so they don't clutter the collection.
        /// </summary>
        public string AlbumParentFolder { get; internal set; }

        /// <summary>
        /// Alternate name of the album folder.
        /// Example: 3 different artists in album, so name would be just *album*. Use Alternate *artist1 - album*
        /// </summary>
        public string AlternateAlbumFolder { get; internal set; }

        /// <summary>
        /// Alternate Parent Folder of the album (if one exists, otherwise null);
        /// Example: ../Albums/*Parent*/AlbumTitle;
        /// This one is set by the user within the UI to replace the AlbumParentFolder;
        /// Note: This is useful whenever you injest a collection of one artist or an album series, so they don't clutter the collection.
        /// </summary>
        public string AlternateParentFolder { get; internal set; }

        /// <summary>
        /// Is this part of a mixed album or is there only one artist
        /// </summary>
        public bool HasVariousArtists { get; internal set; }

        /// <summary>
        /// How many discs does the album have?
        /// </summary>
        public uint MaxDiscNr { get; internal set; }

        /// <summary>
        /// How many tracks does the current disc have?
        /// </summary>
        public uint MaxTrackNr { get; internal set; }

        /// <summary>
        /// Creates a new MusicFile by reading the source file at the given path
        /// </summary>
        /// <param name="path">Path of a music file to be injested</param>
        public MusicFile(string path)
        {
            FileInfo info = new System.IO.FileInfo(path);
            Source = info.FullName;
            if(info.Exists)
            {
                TagLib.File file = TagLib.File.Create(this.Source);

                Artist = file.Tag.FirstPerformer;
                Title = file.Tag.Title;
                Album = file.Tag.Album;
                Genre = file.Tag.FirstGenre;
                TrackNr = file.Tag.Track;
                DiscNr = file.Tag.Disc;
                BiteRate = file.Properties.AudioBitrate;
                Duration = file.Properties.Duration;

                if(Artist == null)
                {
                    if(file.Tag.FirstAlbumArtist != null)
                    {
                        Artist = file.Tag.FirstAlbumArtist;
                        file.Tag.Performers = file.Tag.AlbumArtists;
                        file.Save();
                    }                    
                }
            }
            else
            {
                Artist = null;
                Title = null;
                Album = null;
                Genre = null;
                TrackNr = 0;
                DiscNr = 0;
                BiteRate = 0;
                Duration = TimeSpan.FromSeconds(0);
            }

            Folder = MusicFolder.Folders.NONE;
            AlbumParentFolder = null;
            AlternateAlbumFolder = null;
            AlternateParentFolder = null;
            HasVariousArtists = false;
            MaxDiscNr = 0;
            MaxTrackNr = 0;
        }

        /// <summary>
        /// Creates a new music file based on the given parameters
        /// </summary>
        /// <param name="artist">ID3Tag Artist</param>
        /// <param name="title">ID3Tag Title</param>
        /// <param name="album">ID3Tag Album</param>
        /// <param name="genre">ID3Tag Genre</param>
        /// <param name="path">Path of the music file</param>
        public MusicFile(string artist, string title, string album, string genre, string path)
        {
            Artist = artist;
            Title = title;
            Album = album;
            Source = path;
            Genre = genre;
            TrackNr = 1;
            DiscNr = 1;
            Folder = MusicFolder.Folders.NONE;
            AlbumParentFolder = null;
            HasVariousArtists = false;
            MaxDiscNr = 0;
            MaxTrackNr = 0;
            BiteRate = 0;
            Duration = TimeSpan.FromSeconds(0);
        }

        public override string ToString()
        {
            return FormatDiscNr() + FormatTrackNr() + " - " + Artist + " - " + Title + " (from '" + Album + "', Genre: " + Genre + ") File: " + Source + " Sorted into: "+MusicFolder.GetFolderName(Folder);
        }

        /// <summary>
        /// Copies the file store at 'Source' to the given target (root-)folder, while maintaining the structure as defined by 'Folder' and the album and artist fields.
        /// This will create all subfolders necessary for the copy process.
        /// </summary>
        /// <param name="targetFolder">Root Folder where the file should be copied to (Usually the music collection folder)</param>
        /// <param name="overrideFile">If the file already exists, should it be overriden?</param>
        /// <returns></returns>
        public string CopyToDestination(string targetFolder, bool overrideFile)
        {
            if(CanCopy())
            {
                FileInfo dest = new FileInfo(GetDestination(targetFolder));
                if(!dest.Directory.Exists)
                {
                    Directory.CreateDirectory(dest.Directory.FullName);
                }

                if(!Source.Equals(dest.FullName))
                {
                    if(!File.Exists(dest.FullName) || overrideFile)
                    {
                        File.Copy(Source, dest.FullName, overrideFile);
                    }
                }

                return dest.FullName;
            }
            else
            {
                return Source;
            }
            
        }

        /// <summary>
        /// Based upon the given root folder, this will create the path of the music file while maintaining the structure as defined by 'Folder' and the album and artist fields.
        /// This will include all necessary subdirectories within the root folder.
        /// </summary>
        /// <param name="targetFolder">Root folder as basis for the path (usually the music collection folder)</param>
        /// <returns>Path of the music file, will all naming options (parent folders, album names etc.) included</returns>
        public string GetDestination(string targetFolder)
        {
            FileInfo sourceFile = new FileInfo(Source);
            string newPath = MusicFolder.GetPath(targetFolder, Folder);
            //Console.WriteLine("Source " + sourceFile + " new " + newPath);

            if (Folder == MusicFolder.Folders.ALBUM || Folder == MusicFolder.Folders.FILMMUSIK 
                || Folder == MusicFolder.Folders.PODCASTS || Folder == MusicFolder.Folders.LIEDER)
            {
                if (HasParent())
                {
                    if(AlternateParentFolder != null)
                    {
                        newPath = Path.Combine(newPath, AlternateParentFolder);
                    }
                    else if(AlbumParentFolder != null)
                    {
                        newPath = Path.Combine(newPath, AlbumParentFolder);
                    }
                }

                //Console.WriteLine("Folder: "+ CreateFolderName() + " File: " + CreateFileName(sourceFile, true));

                //Console.WriteLine("Destination: " + Path.Combine(newPath, CreateFolderName(), CreateFileName(sourceFile, true)));
                return Path.Combine(newPath, CreateFolderName(), CreateFileName(sourceFile, Folder != MusicFolder.Folders.LIEDER));
            }
            else
            {
                //Console.WriteLine("Destination = Source: " + Source);
                return Source;
            }
        }

        /// <summary>
        /// Does this music file actually exist on the hard drive and does it contain the necessary ID3 tags?
        /// </summary>
        /// <returns>True: File exists and has necessary info, False: Not a valid file</returns>
        public bool IsValid()
        {
            return Source != null && Title != null && Title.Length > 0 && Artist != null && Artist.Length > 0;
        }

        /// <summary>
        /// Can the music file be copied into a music collection? Firstly checks whether the file is valid and then whether it was sorted into a correct folder.
        /// </summary>
        /// <returns>True: File fulfills all requirements, False: File cannot be copied</returns>
        public bool CanCopy()
        {
            return IsValid() && Folder != MusicFolder.Folders.NONE && Folder != MusicFolder.Folders.PLAYLISTS;
        }

        /// <summary>
        /// Creates the name of the album folder this file will be placed in (direct parent folder).
        /// If no album is set, the artist will instead be used as parent.
        /// Note: The name has all invalid characters for filepaths removed!
        /// </summary>
        /// <returns>Name of the Parent folder for this music file</returns>
        public string CreateFolderName()
        {
            if (AlternateAlbumFolder != null && AlternateAlbumFolder.Length > 0)
            {
                return linuxRegex.Replace(pathRegex.Replace(AlternateAlbumFolder, ""), "");
            }
            else if (Artist != null)
            {
                if (Folder == MusicFolder.Folders.LIEDER || Album == null || Album.Length == 0)
                {
                    return linuxRegex.Replace(pathRegex.Replace(Artist,""), "");
                }
                else if (HasVariousArtists)
                {
                    return linuxRegex.Replace(pathRegex.Replace(Album, ""), "");
                }
                else
                {
                    return linuxRegex.Replace(pathRegex.Replace(Artist + " - " + Album, ""), "");
                }
            }
            else
            {
                return "";
            }
            
        }

        /// <summary>
        /// Creates the new file name (after our convention) for the source file
        /// Note: The name has all invalid characters for filepaths removed!
        /// </summary>
        /// <param name="sourceFile">Source file to ensure that the correct file extension is used</param>
        /// <param name="useTrackNr">Naming Convention parameter: Do we add a number in front of the title (for albums) or do we just use the title (for singles)</param>
        /// <returns>The new file name (no paths!)</returns>
        private string CreateFileName(FileInfo sourceFile, bool useTrackNr)
        {
            if (useTrackNr && TrackNr > 0)
            {
                return FormatDiscNr() + FormatTrackNr() + " - " + linuxRegex.Replace(pathRegex.Replace(Title, ""),"") + sourceFile.Extension;
            }
            else
            {
                return linuxRegex.Replace(pathRegex.Replace(Title, ""),"") + sourceFile.Extension;
            }
        }

        /// <summary>
        /// Formats the tracknumber to include all necessary leading zeros
        /// </summary>
        /// <returns>String with correctly formatted number</returns>
        public string FormatTrackNr()
        {
            if(MaxTrackNr >= 100)
            {
                return TrackNr.ToString("000");
            }
            else
            {
                return TrackNr.ToString("00");
            }
        }

        /// <summary>
        /// Formats the discnumber with all necessary leading zeros.
        /// Missing disc numbers will be set to 1
        /// </summary>
        /// <returns>String with correctly formatted number</returns>
        public string FormatDiscNr()
        {
            uint disc = Math.Max(1, DiscNr);

            if(MaxDiscNr >= 10)
            {
                return disc.ToString("00");
            }
            else
            {
                return disc.ToString("0");
            }
        }

        /// <summary>
        /// Returns whether this music file has a parent folder above its album folder or not
        /// </summary>
        /// <returns>True: Algorithm found parent or User set parent, False: No parent</returns>
        public bool HasParent()
        {
            return (AlternateParentFolder != null && AlternateParentFolder.Length > 0) ||
                (AlbumParentFolder != null && AlbumParentFolder.Length > 0);
        }

        /// <summary>
        /// Returns the parent folder above the album folder
        /// </summary>
        /// <returns>Parent folder or null if none was set</returns>
        public string GetParent()
        {
            if(AlternateParentFolder != null)
            {
                return AlternateParentFolder;
            }
            return AlbumParentFolder;
        }

        /// <summary>
        /// Returns the album folder this file will be placed in.
        /// If the user set an alternate folder, this will return the alternate
        /// </summary>
        /// <returns>Album folder or null, if the file has no album tag</returns>
        public string GetAlbumFolder()
        {
            if(AlternateAlbumFolder != null)
            {
                return AlternateAlbumFolder;
            }
            return Album;
        }
    }

}
